//Almost Final
package chat.client;

import static chat.client.CommonSettings.*;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Formatter;
import java.util.Properties;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 *
 * @author m_hus
 */
public class InformationDialog extends JDialog {

    /**
     * Creates new form InformationDialog1
     *
     * @param parent
     */
    public InformationDialog(JFrame parent) {//Change into JFram when chatClient JFrame is done
        super(parent, PRODUCT_NAME + " - Login", true);
        chatClient = parent;
        setFont(chatClient.getFont());//setFont(chatClient.getTextFont());
        isConnect = false;
        properties = this.getProperties();

        initComponents();

        if (properties.getProperty("TurtleServerName") != null) {
            txtServerName.setText(properties.getProperty("TurtleServerName"));
        } else {
            txtServerName.setText("localhost");
        }

        if (properties.getProperty("TurtleServerPort") != null) {
            txtServerPort.setText(properties.getProperty("TurtleServerPort"));
        } else {
            txtServerPort.setText(Integer.toString(PORT_NUMBER));
        }

        //setSize(250, 400);
        chatClient.setVisible(true);//show();
        
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        lblUserName = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        lblServerName = new javax.swing.JLabel();
        txtServerName = new javax.swing.JTextField();
        lblServerPort = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        lblProxy = new javax.swing.JLabel();
        isProxyCheckBox = new javax.swing.JCheckBox();
        lblProxyHost = new javax.swing.JLabel();
        txtProxyHost = new javax.swing.JTextField();
        lblProxyPort = new javax.swing.JLabel();
        txtProxyPort = new javax.swing.JTextField();
        cmdOk = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setSize(new java.awt.Dimension(300, 400));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonPanel.setLayout(new java.awt.GridLayout(7, 2, 15, 30));

        lblUserName.setText("Nick Name: ");
        buttonPanel.add(lblUserName);

        txtUserName.setText(properties.getProperty("TurtleUserName"));
        buttonPanel.add(txtUserName);

        lblServerName.setText("Server Name: ");
        buttonPanel.add(lblServerName);
        buttonPanel.add(txtServerName);

        lblServerPort.setText("Server Port: ");
        buttonPanel.add(lblServerPort);
        buttonPanel.add(txtServerPort);

        lblProxy.setText("Proxy :");
        buttonPanel.add(lblProxy);

        isProxyCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty("TurtleProxyState")));
        buttonPanel.add(isProxyCheckBox);

        lblProxyHost.setText("Proxy Host (Socks): ");
        buttonPanel.add(lblProxyHost);

        txtProxyHost.setText(properties.getProperty("TurtleProxyHost"));
        buttonPanel.add(txtProxyHost);

        lblProxyPort.setText("Proxy Port (Socks): ");
        buttonPanel.add(lblProxyPort);

        txtProxyPort.setText(properties.getProperty("TurtleProxyPort"));
        buttonPanel.add(txtProxyPort);

        cmdOk.setText("Connect");
        cmdOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOkActionPerformed(evt);
            }
        });
        buttonPanel.add(cmdOk);

        cmdCancel.setText("Quit");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        buttonPanel.add(cmdCancel);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOkActionPerformed
        // TODO add your handling code here:
        isConnect = true;
        setProperties(properties);
        dispose();
    }//GEN-LAST:event_cmdOkActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        isConnect = false;
        dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_formWindowClosing

//Bean Methods
    public String getTxtUserName() {
        return this.txtUserName.getText();
    }

    public String getTxtServerName() {
        return this.txtServerName.getText();
    }

    public String getTxtServerPort() {
        return this.txtServerPort.getText();
    }

    public String getTxtProxyHost() {
        return txtProxyHost.getText();
    }

    public String getTxtProxyPort() {
        return txtProxyPort.getText();
    }

    public boolean isProxyCheckBox() {
        return isProxyCheckBox.isSelected();
    }

    private Properties getProperties() {
        var propertiesLocal = new Properties();
        try {
            var file = new File("data.properties");
            if (file.exists()) {
                try ( var inputstream = this.getClass().getClassLoader().getResourceAsStream("data.properties")) {
                    propertiesLocal.load(inputstream);
                }
            } else {
                var f = new Formatter(file);
                f.format("TurtleUserName=%s\r\n", "amir");
                f.format("TurtleServerName=%s\r\n", "");
                f.format("TurtleProxyPort=%s\r\n", "");
                f.format("TurtleServerPort=%d\r\n", PORT_NUMBER);
                f.format("TurtleProxyHost=%s\r\n", "");
                f.format("TurtleProxyState=%s", false);
                f.close();

                // print everything
                propertiesLocal.forEach((k, v) -> System.out.println(k + "=" + v));
            }
        } catch (java.io.IOException | java.lang.NullPointerException exc) {
            exc.printStackTrace();
        } finally {
            return propertiesLocal;
        }
    }

    private void setProperties(Properties properties) {
        this.properties = properties;
        try {
            var fout = new FileOutputStream(new File("data.properties"));
            if (isProxyCheckBox()) { //isProxyCheckBox.getState() == true
                properties.setProperty("TurtleProxyState", "true");
            } else {
                properties.setProperty("TurtleProxyState", "false");
            }
            properties.setProperty("TurtleUserName", txtUserName.getText());
            properties.setProperty("TurtleServerName", txtServerName.getText());
            properties.setProperty("TurtleServerPort", txtServerPort.getText());
            properties.setProperty("TurtleProxyHost", txtProxyHost.getText());
            properties.setProperty("TurtleProxyPort", txtProxyPort.getText());
            properties.store(fout, PRODUCT_NAME);//save(fout,PRODUCT_NAME);
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOk;
    private javax.swing.JCheckBox isProxyCheckBox;
    private javax.swing.JLabel lblProxy;
    private javax.swing.JLabel lblProxyHost;
    private javax.swing.JLabel lblProxyPort;
    private javax.swing.JLabel lblServerName;
    private javax.swing.JLabel lblServerPort;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTextField txtProxyHost;
    private javax.swing.JTextField txtProxyPort;
    private javax.swing.JTextField txtServerName;
    private javax.swing.JTextField txtServerPort;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
    protected boolean isConnect;
    private Properties properties;

    //Change into JFrame when ChatClient JFrame is done 
    JFrame chatClient;
}
