package chat.client;

import static chat.client.CommonSettings.*;
import chat.client.net.SocksSocketImplFactory;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.SocketImplFactory;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

public class ChatClient extends javax.swing.JFrame implements Runnable {

    public ChatClient() {
        var a = 1.0;
        //Getting all the Parameters
        userName = "";
        userRoom = "";
        isProxy = false;
        iconCount = 21;

        //variables use with JList
        messages = new ArrayList<>();
        selectedUser = "";
        //Loading Images
        theKit = this.getToolkit();

        //Initialize Private Window
        privateChats = new ArrayList<>();//PrivateChat[MAX_PRIVATE_WINDOW];
        setIconImage(theKit.getImage("images/logo.gif"));
        setAppletStatus("");
        //Initializing all the Components
        initComponents();
        updateInformationLabel();
        addIcons();
        Dimension wndSize = theKit.getScreenSize();
        setSize(wndSize.width / 2, wndSize.height / 2);
        setLocationRelativeTo(null);

        userListModel = new DefaultListModel<>();
        userList.setModel(userListModel);
        userList.setCellRenderer(new ListRenderer());

        message = new Message();
        messages.add(message);

        roomListModel = new DefaultListModel<>();
        roomList.setModel(roomListModel);
        roomList.setCellRenderer(new ListRenderer());

        loginToChat();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        logoPanel = new javax.swing.JPanel();
        logoLabel = new javax.swing.JLabel();
        bannerPanel = new javax.swing.JPanel();
        bannerLabel = new javax.swing.JLabel();
        centerPanel = new javax.swing.JPanel();
        inputPanel = new javax.swing.JPanel();
        textBoxPanel = new javax.swing.JPanel();
        lblGeneral = new javax.swing.JLabel();
        textMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        inputButtonPanel = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        emptyPanel = new javax.swing.JPanel();
        informationPanel = new javax.swing.JPanel();
        informationLabel = new javax.swing.JLabel();
        tapPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        userPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        userButtonPanel = new javax.swing.JPanel();
        btnSendDirect = new javax.swing.JButton();
        btnIgnoreUser = new javax.swing.JButton();
        roomPanel = new javax.swing.JPanel();
        roomScrollPane = new javax.swing.JScrollPane();
        roomList = new javax.swing.JList<>();
        roomButtonPanel = new javax.swing.JPanel();
        roomCountPanel = new javax.swing.JPanel();
        lblCaption = new javax.swing.JLabel();
        txtUserCount = new javax.swing.JTextField();
        btnChangeRoom = new javax.swing.JButton();
        imagesPanel = new javax.swing.JPanel();
        userScrollPane = new javax.swing.JScrollPane();
        imagePane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        messagePane = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        loginMenu = new javax.swing.JMenu();
        loginItem = new javax.swing.JMenuItem();
        disconnectItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(PRODUCT_NAME);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        topPanel.setLayout(new java.awt.BorderLayout());

        logoPanel.setLayout(new java.awt.BorderLayout());

        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chat/client/images/logo.gif"))); // NOI18N
        logoPanel.add(logoLabel, java.awt.BorderLayout.CENTER);

        topPanel.add(logoPanel, java.awt.BorderLayout.EAST);

        bannerPanel.setLayout(new java.awt.BorderLayout());

        bannerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chat/client/images/defaultbanner.gif"))); // NOI18N
        bannerPanel.add(bannerLabel, java.awt.BorderLayout.CENTER);

        topPanel.add(bannerPanel, java.awt.BorderLayout.WEST);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        centerPanel.setLayout(new java.awt.BorderLayout());

        inputPanel.setLayout(new java.awt.BorderLayout());

        textBoxPanel.setLayout(new java.awt.BorderLayout());

        lblGeneral.setText("General Message! ");
        textBoxPanel.add(lblGeneral, java.awt.BorderLayout.WEST);

        textMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textMessageKeyPressed(evt);
            }
        });
        textBoxPanel.add(textMessage, java.awt.BorderLayout.CENTER);

        btnSend.setText("Send Message!");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        textBoxPanel.add(btnSend, java.awt.BorderLayout.LINE_END);

        inputPanel.add(textBoxPanel, java.awt.BorderLayout.CENTER);

        inputButtonPanel.setLayout(new java.awt.BorderLayout());

        btnExit.setText("Exit Chat");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        inputButtonPanel.add(btnExit, java.awt.BorderLayout.PAGE_START);

        inputPanel.add(inputButtonPanel, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout emptyPanelLayout = new javax.swing.GroupLayout(emptyPanel);
        emptyPanel.setLayout(emptyPanelLayout);
        emptyPanelLayout.setHorizontalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        emptyPanelLayout.setVerticalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        inputPanel.add(emptyPanel, java.awt.BorderLayout.SOUTH);

        centerPanel.add(inputPanel, java.awt.BorderLayout.PAGE_END);

        informationPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        informationPanel.setLayout(new java.awt.BorderLayout());

        informationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        informationLabel.setText("Information Label");
        informationPanel.add(informationLabel, java.awt.BorderLayout.CENTER);

        centerPanel.add(informationPanel, java.awt.BorderLayout.NORTH);

        tapPanel.setLayout(new java.awt.BorderLayout());

        userPanel.setLayout(new java.awt.BorderLayout());

        userList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userList);

        userPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        userButtonPanel.setLayout(new java.awt.BorderLayout());

        btnSendDirect.setText("Send Direct Message");
        btnSendDirect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendDirectActionPerformed(evt);
            }
        });
        userButtonPanel.add(btnSendDirect, java.awt.BorderLayout.NORTH);

        btnIgnoreUser.setText("Ignore User");
        btnIgnoreUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIgnoreUserActionPerformed(evt);
            }
        });
        userButtonPanel.add(btnIgnoreUser, java.awt.BorderLayout.SOUTH);

        userPanel.add(userButtonPanel, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("User   ", userPanel);

        roomPanel.setLayout(new java.awt.BorderLayout());

        roomScrollPane.setViewportView(roomList);

        roomPanel.add(roomScrollPane, java.awt.BorderLayout.CENTER);

        roomButtonPanel.setLayout(new java.awt.BorderLayout());

        roomCountPanel.setLayout(new java.awt.BorderLayout());

        lblCaption.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCaption.setText("ROOM COUNT");
        lblCaption.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        roomCountPanel.add(lblCaption, java.awt.BorderLayout.NORTH);

        txtUserCount.setEditable(false);
        txtUserCount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        roomCountPanel.add(txtUserCount, java.awt.BorderLayout.CENTER);

        btnChangeRoom.setText("Change Room");
        btnChangeRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeRoomActionPerformed(evt);
            }
        });
        roomCountPanel.add(btnChangeRoom, java.awt.BorderLayout.PAGE_END);

        roomButtonPanel.add(roomCountPanel, java.awt.BorderLayout.PAGE_START);

        roomPanel.add(roomButtonPanel, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Rooms", roomPanel);

        imagesPanel.setLayout(new java.awt.BorderLayout());

        userScrollPane.setViewportView(imagePane);

        imagesPanel.add(userScrollPane, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Images", imagesPanel);

        tapPanel.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        centerPanel.add(tapPanel, java.awt.BorderLayout.LINE_END);

        messagePane.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(messagePane);

        centerPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        loginMenu.setText("Login");

        loginItem.setText("Login");
        loginItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginItemActionPerformed(evt);
            }
        });
        loginMenu.add(loginItem);

        disconnectItem.setText("Logout");
        disconnectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectItemActionPerformed(evt);
            }
        });
        loginMenu.add(disconnectItem);
        loginMenu.add(jSeparator1);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        loginMenu.add(exitItem);

        menuBar.add(loginMenu);

        helpMenu.setText("Help");

        aboutItem.setText("About" + PRODUCT_NAME);
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginToChat() {
        //Open the Dialog
        dialog = new InformationDialog(this);
        if (dialog.isConnect) {
            userName = dialog.getTxtUserName();
            //UserRoom 	= dialog.roomchoice.getSelectedItem();
            serverName = dialog.getTxtServerName();
            serverPort = Integer.parseInt(dialog.getTxtServerPort());
            if (dialog.isProxyCheckBox()) {//getState()
                isProxy = true;
                proxyHost = dialog.getTxtProxyHost();
                proxyPort = Integer.parseInt(dialog.getTxtProxyPort());
            } else {
                isProxy = false;
            }
            connectToServer();
        }
    }

    private void sendMessageToServer(String message) {
        try {
            out.writeBytes(message + "\r\n");
        } catch (IOException ie) {
            quitConnection(QUIT_TYPE_DEFAULT);
            ie.printStackTrace();
        }
    }

    //Function to Destroy all the Objects
    private void quitConnection(int quitType) {
        if (socket != null) {
            try {
                if (quitType == QUIT_TYPE_DEFAULT) {
                    sendMessageToServer("QUIT " + userName + "~" + userRoom);
                }
                if (quitType == QUIT_TYPE_KICK) {
                    sendMessageToServer("KICK " + userName + "~" + userRoom);
                }
                socket.close();
                socket = null;
                userListModel.clear(); //tapPanel.userCanvas.clearAll();
            } catch (IOException ie) {
                ie.printStackTrace();
            }
        }
        if (thread != null) {
            thread.interrupt();//stop();
            thread = null;
        }
        disableAll();
        startFlag = false;
        setAppletStatus("ADMIN: CONNECTION TO THE SERVER CLOSED.");
    }

    //Implements the Thread
    @Override
    public void run() {
        while (thread != null) {
            try {
                serverData = in.readLine();
                System.out.println(serverData);
                // LIST UserName;UserName; RFC Coding
                if (serverData.startsWith("LIST")) {
                    tokenizer = new StringTokenizer(serverData.substring(5), ";");
                    //Update the Information Label *
                    totalUserCount = tokenizer.countTokens();
                    updateInformationLabel();
                    //Add User Item into User Canvas
                    userListModel.clear();//tapPanel.userCanvas.clearAll();
                    while (tokenizer.hasMoreTokens()) {
                        userListModel.addElement(createImageIcon("images/icon.gif", tokenizer.nextToken()));
                    }
                    messagePane.setText("");//messageCanvas.ClearAll();
                    appendToPane(messagePane, "<span> Welcome To The " + userRoom + " Room!</span>");
                }

                //Room RFC 
                if (serverData.startsWith("ROOM")) {
                    //Loading Room List in to Room Canvas
                    tokenizer = new StringTokenizer(serverData.substring(5), ";");
                    userRoom = tokenizer.nextToken();
                  
                    //Add User Item into User Canvas
                    roomListModel.clear();//tapPanel.roomCanvas.clearAll();
                    roomListModel.addElement(createImageIcon("images/icon.gif", userRoom));//tapPanel.roomCanvas.addListItemToMessageObject(userRoom);
                    while (tokenizer.hasMoreTokens()) {
                        String str = tokenizer.nextToken();
                        roomListModel.addElement(createImageIcon("images/icon.gif", str));
                    }
                    updateInformationLabel();
                }

                //ADD RFC
                if (serverData.startsWith("ADD")) {
                    //Update the Information Label 
                    totalUserCount++;
                    updateInformationLabel();

                    //Add User Item into User Canvas 
                    splitString = serverData.substring(5);
                    enablePrivateWindow(splitString);
                    userListModel.addElement(createImageIcon("images/icon.gif", splitString));//tapPanel.userCanvas.addListItemToMessageObject(splitString);
                    
                    appendToPane(messagePane, "<span>" + splitString + " joins chat...</span>");
                }

                //If User Name Already Exists
                if (serverData.startsWith("EXIS")) {
                    appendToPane(messagePane, "<span> User Name Already Exists... Try Again With Some Other Name!</span>");
                    thread = null;
                    quitConnection(QUIT_TYPE_NULL);
                }

                //REMOVE User RFC Coding
                if (serverData.startsWith("REMO")) {
                    splitString = serverData.substring(5); //REMO~NAME
                    removeUserFromPrivateChat(splitString);
                    
                    userListModel.removeElement(createImageIcon("images/icon.gif", splitString));
                                                        
                    appendToPane(messagePane, "<span>" + splitString + " has been logged Out from Chat!</span>");

                    //Update the Information Label
                    totalUserCount--;
                    updateInformationLabel();
                }

                //MESS RFC Coding Starts
                if (serverData.startsWith("MESS")) {
                    //Check whether ignored user
                    if (!(isIgnoredUser(serverData.substring(5, serverData.indexOf(":"))))) {
                        appendToPane(messagePane, "<span>" + serverData.substring(5) + "</span>");
                    }
                }

                //KICK RFC Starts
                if (serverData.startsWith("KICK")) {
                    appendToPane(messagePane, "<span>You are Kicked Out From Chat for flooding the message!</span>");
                    thread = null;
                    quitConnection(QUIT_TYPE_KICK);
                }

                //INKI RFC (Information about kicked off User
                if (serverData.startsWith("INKI")) {
                    splitString = serverData.substring(5);
                    userListModel.removeElement(splitString);
                    removeUserFromPrivateChat(splitString);
                    appendToPane(messagePane, "<span>" + splitString + " has been kicked Out from Chat by the Administrator!</span>");

                    //Update the Information Label
                    totalUserCount--;
                    updateInformationLabel();
                }

                //Change Room RFC
                if (serverData.startsWith("CHRO")) {
                    userRoom = serverData.substring(5);
                }

                //Join Room RFC
                if (serverData.startsWith("JORO")) {
                    splitString = serverData.substring(5);
                    userListModel.addElement(createImageIcon("images/icon.gif", splitString));
                    
                    //Update the Information Label
                    totalUserCount++;
                    updateInformationLabel();
                    appendToPane(messagePane, "<span>" + splitString + " joins chat...</span>");
                }

                //Leave Room RFC
                if (serverData.startsWith("LERO")) {
                    splitString = serverData.substring(5, serverData.indexOf("~"));
                    userListModel.removeElement(splitString);
                    appendToPane(messagePane, "<span>" + splitString + " has leaves "
                            + userRoom + " Room and join into "
                            + serverData.substring(serverData.indexOf("~") + 1)
                            + " Room</span>");
                    //Update the Information Label
                    totalUserCount--;
                    updateInformationLabel();
                }

                //Room Count RFC
                if (serverData.startsWith("ROCO")) {
                    splitString = serverData.substring(5, serverData.indexOf("~"));
                    txtUserCount.setText("Total Users in " + splitString + " : " + serverData.substring(serverData.indexOf("~") + 1));
                }

                //Private Message RFC
                if (serverData.startsWith("PRIV")) {
                    splitString = serverData.substring(5, serverData.indexOf(":"));
                    //Check whether ignored user
                    if (!(isIgnoredUser(splitString))) {
                        boolean PrivateFlag = false;
                        for (PrivateChat privateWindow : privateChats) {
                            if (privateWindow.getUserName().equals(splitString)) {
                                privateWindow.addMessageToMessagePane(serverData.substring(5));
                                privateWindow.setVisible(true);
                                privateWindow.requestFocus();
                                PrivateFlag = true;
                                break;
                            }
                        }
                        if (!(PrivateFlag)) {
                            if (privateChats.size() >= MAX_PRIVATE_WINDOW) {
                                appendToPane(messagePane, "<span>You are Exceeding private window limit! So you may lose some message from your friends!</span>");
                            } else {
                                privateChats.add(new PrivateChat(this, splitString));
                                privateChats.get(privateChats.size() - 1).addMessageToMessagePane(serverData.substring(5));
                                privateChats.get(privateChats.size() - 1).setVisible(true);
                                privateChats.get(privateChats.size() - 1).requestFocus();
                            }
                        }
                    }
                }
            } catch (IOException e) {
                appendToPane(messagePane, "<span>" + e.getMessage() + "</span>");
                quitConnection(QUIT_TYPE_DEFAULT);
                e.printStackTrace();
            }
        }
    }

    //Button Events
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        disconnectChat();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        JOptionPane.showMessageDialog(this, PRODUCT_NAME + "\n Developed By...\n" + COMPANY_NAME,
                "About Us", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("icons/photo13.gif"));
    }//GEN-LAST:event_aboutItemActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        disconnectChat();
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (!(textMessage.getText().trim().equals(""))) {
            sendMessage();
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        disconnectChat();
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void textMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textMessageKeyPressed
        if ((evt.getKeyCode() == 10) && (!(textMessage.getText().trim().equals("")))) {
            sendMessage();
        }
    }//GEN-LAST:event_textMessageKeyPressed

    private void disconnectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectItemActionPerformed
        disconnectChat();
    }//GEN-LAST:event_disconnectItemActionPerformed

    private void loginItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginItemActionPerformed
        loginToChat();
    }//GEN-LAST:event_loginItemActionPerformed

    private void btnSendDirectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendDirectActionPerformed
        sendDirectMessage();
    }//GEN-LAST:event_btnSendDirectActionPerformed

    private void btnChangeRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeRoomActionPerformed
        changeRoom();
    }//GEN-LAST:event_btnChangeRoomActionPerformed

    private void btnIgnoreUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIgnoreUserActionPerformed
        if (evt.getActionCommand().equals("Ignore User")) {
            ignoreUser(true);
        } else {
            ignoreUser(false);
        }
    }//GEN-LAST:event_btnIgnoreUserActionPerformed

    private void userListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListMouseClicked
        int index = userList.getSelectedIndex();
        selectedUser = userListModel.get(index).getDescription();
        txtUserCount.setText("");
        if (isIgnoredUser(selectedUser)) {
            btnIgnoreUser.setText("Allow User");
        } else {
            btnIgnoreUser.setText("Ignore User");
        }

        repaint();
        if ((evt.getClickCount() == 2)
                && (!(selectedUser.equals("")))
                && (!(selectedUser.equals(userName)))) {
            createPrivateWindow();
        }
    }//GEN-LAST:event_userListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChatClient().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JLabel bannerLabel;
    private javax.swing.JPanel bannerPanel;
    private javax.swing.JButton btnChangeRoom;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnIgnoreUser;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSendDirect;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JMenuItem disconnectItem;
    private javax.swing.JPanel emptyPanel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextPane imagePane;
    private javax.swing.JPanel imagesPanel;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JPanel inputButtonPanel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCaption;
    private javax.swing.JLabel lblGeneral;
    private javax.swing.JMenuItem loginItem;
    private javax.swing.JMenu loginMenu;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextPane messagePane;
    private javax.swing.JPanel roomButtonPanel;
    private javax.swing.JPanel roomCountPanel;
    private javax.swing.JList<ImageIcon> roomList;
    private javax.swing.JPanel roomPanel;
    private javax.swing.JScrollPane roomScrollPane;
    private javax.swing.JPanel tapPanel;
    private javax.swing.JPanel textBoxPanel;
    private javax.swing.JTextField textMessage;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField txtUserCount;
    private javax.swing.JPanel userButtonPanel;
    private javax.swing.JList<ImageIcon> userList;
    private javax.swing.JPanel userPanel;
    private javax.swing.JScrollPane userScrollPane;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel<ImageIcon> userListModel, roomListModel;

    //For future Network class 
    private String userName, serverData, splitString;
    private String userRoom, serverName, proxyHost;

    private int serverPort, proxyPort, totalUserCount;

    private boolean startFlag, isProxy;

    private Socket socket;
    private BufferedReader in; //private DataInputStream in;
    private DataOutputStream out;

    private Thread thread;
    private StringTokenizer tokenizer;

    private String selectedUser;

    protected List<PrivateChat> privateChats;//PrivateChat[] privateWindows;
    protected int count, iconCount;
    private InformationDialog dialog;
    private Toolkit theKit;
    private StringBuffer stringBuffer;
    List<Message> messages;
    Message message;

    public String getUserName() {
        return userName;
    }

    //Setting the appletStatus
    private void setAppletStatus(String message) {
        if (messagePane != null) {
            appendToPane(messagePane, "<span>" + message + "</span>");
        }
    }

    //Function To Update the Information Label
    private void updateInformationLabel() {
        stringBuffer = new StringBuffer();
        stringBuffer.append("User Name: ");
        stringBuffer.append(userName);
        stringBuffer.append("       ");
        stringBuffer.append("Room Name: ");
        stringBuffer.append(userRoom);
        stringBuffer.append("       ");
        stringBuffer.append("No. Of Users: ");
        stringBuffer.append(totalUserCount);
        stringBuffer.append("       ");
        informationLabel.setText(stringBuffer.toString());
    }

    //Function To Disable All Components
    private void disableAll() {
        textMessage.setEnabled(false);
        btnSend.setEnabled(false);
        tapPanel.setEnabled(false);
        disconnectItem.setEnabled(false);
        loginItem.setEnabled(true);
        userName = "";
        userRoom = "";
        totalUserCount = 0;
    }

    //Function To Enable All Components
    private void enableAll() {
        textMessage.setEnabled(true);
        btnSend.setEnabled(true);
        tapPanel.setEnabled(true);
        disconnectItem.setEnabled(true);
        loginItem.setEnabled(false);
    }

    //Disconnect Chat
    private void disconnectChat() {
        if (socket != null) {
            appendToPane(messagePane, "<span>CONNECTION TO THE SERVER CLOSED</span>");
            quitConnection(QUIT_TYPE_DEFAULT);
        }
    }

    /**
     **** Enable the Private Chat when the End User logged out***
     */
    private void enablePrivateWindow(String ToUserName) {
        for (PrivateChat privateChat : privateChats) {
            if (privateChat.getUserName().equals(ToUserName)) {
                privateChat.addMessageToMessagePane(ToUserName + " is Currently Online!");
                privateChat.enableAll();
                return;
            }
        }
    }

    /**
     * *** Disable the Private Chat when the End User logged out***
     */
    private void removeUserFromPrivateChat(String ToUserName) {
        for (PrivateChat privateChat : privateChats) {
            if (privateChat.getUserName().equals(ToUserName)) {
                privateChat.addMessageToMessagePane(ToUserName + " is Currently Offline!");
                privateChat.disableAll();
                return;
            }
        }
    }

    //Function To Send Private Message To Server
    protected void sentPrivateMessageToServer(String message, String toUserName) {
        sendMessageToServer("PRIV " + toUserName + "~" + userName + ": " + message);
    }

    //Function To Remove Private Window
    synchronized protected void removePrivateWindow(String ToUserName) {
        System.out.println(privateChats);
        for (PrivateChat privateChat : privateChats) {
            if (privateChat.getUserName().equals(ToUserName)) {
                privateChats.remove(privateChat);
            }
        }
    }

    //Function to Change Room
    protected void changeRoom() {
        int index = roomList.getSelectedIndex();
        String user = roomListModel.get(index).getDescription();
        if (user.equals("")) {
            appendToPane(messagePane, "<span> Invalid Room Selection!</span>");
            return;
        }
        if (user.equals(userRoom)) {
            appendToPane(messagePane, "<span> You are already in that ROOM!</span>");
            return;
        }
        sendMessageToServer("CHRO " + userName + "~" + user);
    }

    //Function to Send a RFC for Get a Room User Count
    protected void getRoomUserCount(String RoomName) {
        sendMessageToServer("ROCO " + RoomName);
    }

    //Function to Set the Image Name into Text Field
    protected void addImageToTextField(String imageName) {
        if (textMessage.getText() == null || textMessage.getText().equals("")) {
            textMessage.setText("~~" + imageName + " ");
        } else {
            textMessage.setText(textMessage.getText() + " "
                    + "~~" + imageName + " ");
        }
    }

    private void connectToServer() {
        //Initialize the Socket
        messagePane.setText("");//messageCanvas.ClearAll();
        appendToPane(messagePane, "<span>Connecting To Server... Please Wait...</span>");
        //Initialize the Socket
        try {
            if (isProxy) {
                //Proxy
                SocketImplFactory factory
                        = new SocksSocketImplFactory(proxyHost, proxyPort);
                Socket.setSocketImplFactory(factory);
                socket = new Socket(serverName, serverPort);
                socket.setSoTimeout(0);
            } else {
                //Not Proxy
                socket = new Socket(serverName, serverPort);
            }
            out = new DataOutputStream(socket.getOutputStream());
            sendMessageToServer("HELO " + userName);
//            in = new DataInputStream(socket.getInputStream());
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            //Send HELO To Server
            startFlag = true;
            thread = new Thread(this);
            thread.start();
            enableAll();
        } catch (IOException ie) {
            quitConnection(QUIT_TYPE_NULL);
            ie.printStackTrace();
        }
    }

    //Function To Send MESS RFC to Server
    private void sendMessage() {
        //Sending a Message To Server
        sendMessageToServer("MESS " + userRoom + "~" + userName + ": " + textMessage.getText());
        appendToPane(messagePane, "<span>" + userName + ": " + textMessage.getText() + "...</span>");
        textMessage.setText("");
        textMessage.requestFocus();
    }

    // send html to pane
    private void appendToPane(JTextPane textPane, String message) {
        HTMLDocument doc = (HTMLDocument) textPane.getDocument();
        HTMLEditorKit editorKit = (HTMLEditorKit) textPane.getEditorKit();
        try {
            editorKit.insertHTML(doc, doc.getLength(), message, 0, 0, null);
            textPane.setCaretPosition(doc.getLength());
        } catch (IOException | BadLocationException e) {
            e.printStackTrace();
        }
    }

    //Set or Remove Ignore List from Array
    protected void ignoreUser(boolean isIgnore) {
        if (selectedUser.equals("")) {
            appendToPane(messagePane, "<span>Invalid User Selection!</span>");
            return;
        }
        if (selectedUser.equals(userName)) {
            appendToPane(messagePane, "<span>You can not ignored yourself!</span>");
            return;
        }
        ignoreUser(isIgnore, selectedUser);

    }

    protected void ignoreUser(boolean ignore, String ignoreUserName) {
        int listIndex = userList.getSelectedIndex();//getIndexOf(ignoreUserName);
        String name = userListModel.get(listIndex).getDescription();
        System.out.println(listIndex);
        if (listIndex >= 0) {
            message = messages.get(listIndex);
            message.setIgnore(ignore);//isIgnored = ignore;
            messages.set(listIndex, message);

            if (ignore) {
                btnIgnoreUser.setText("Allow User");
                appendToPane(messagePane, "<span>" + ignoreUserName + " has been ignored!</span>");
            } else {
                btnIgnoreUser.setText("Ignore User");
                appendToPane(messagePane, "<span>" + ignoreUserName + " has been romoved from ignored list!</span>");
            }
        }
    }

    //Check Whether the User ignored or not     
    protected boolean isIgnoredUser(String userName) {
        int listIndex = userListModel.indexOf(userName);//getIndexOf(userName);
        if (listIndex >= 0) {
            message = messages.get(listIndex);
            return message.isIgnore();
        }

        //By Default
        return false;
    }

    //Returns an ImageIcon, or null if the path was invalid.
    protected ImageIcon createImageIcon(String path, String description) {
        URL imgURL = ChatClient.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    private void addIcons() {
        StyledDocument doc = imagePane.getStyledDocument();
        Style def = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        try {
            for (int i = 1; i < 22; i++) {
                Style s = doc.addStyle("icon" + (i - 1), def);
                ImageIcon icon = createImageIcon("icons/photo" + (i - 1) + ".gif", String.valueOf(i - 1));
                if (icon != null) {
                    StyleConstants.setIcon(s, icon);
                }
                if (i % 6 == 0) {
                    doc.insertString(doc.getLength(), "  \n", doc.getStyle("icon" + (i - 1)));
                } else {
                    doc.insertString(doc.getLength(), " ", doc.getStyle("icon" + (i - 1)));
                }
            }
        } catch (BadLocationException ble) {
            System.err.println("Couldn't insert initial text into text pane.");
        }
    }

    protected void sendDirectMessage() {
        if (selectedUser.equals("")) {
            appendToPane(messagePane, "Invalid User Selection!");
            return;
        }
        if (selectedUser.equals(getUserName())) {
            appendToPane(messagePane, "You can not chat with yourself!");
            return;
        }
        createPrivateWindow();
    }

    private void createPrivateWindow() {
        //Check whether ignored user
        if (!(isIgnoredUser(selectedUser))) {
            boolean privateFlag = false;
            for (PrivateChat privateChat : privateChats) {
                if (privateChat.getUserName().equals(selectedUser)) {
                    privateChat.setVisible(true);
                    privateChat.requestFocus();
                    privateFlag = true;
                    break;
                }
            }
            if (!(privateFlag)) {
                if (privateChats.size() >= MAX_PRIVATE_WINDOW) {
                    appendToPane(messagePane, "You are Exceeding private window limit! So you may lose some message from your friends!");
                } else {
                    privateChats.add(new PrivateChat(this, selectedUser));
                    privateChats.get(privateChats.size() - 1).setVisible(true);
                    privateChats.get(privateChats.size() - 1).requestFocus();
                }
            }
        }
    }
}
